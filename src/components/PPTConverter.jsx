import React, { useState } from 'react';
import { motion } from 'framer-motion';
import { useNavigate } from 'react-router-dom';

/**
 * @feature PPT to Interactive Story Converter
 * Upload PowerPoint presentations and convert them into interactive learning stories
 * Features: Drag & drop upload, AI-powered conversion, story preview, progress tracking
 */

const PPTConverter = () => {
  const navigate = useNavigate();
  const [uploadedFile, setUploadedFile] = useState(null);
  const [isConverting, setIsConverting] = useState(false);
  const [conversionProgress, setConversionProgress] = useState(0);
  const [conversionComplete, setConversionComplete] = useState(false);
  const [dragActive, setDragActive] = useState(false);
  const [showResults, setShowResults] = useState(false);
  const [generatedContent, setGeneratedContent] = useState(null);

  const handleDrag = (e) => {
    e.preventDefault();
    e.stopPropagation();
    if (e.type === 'dragenter' || e.type === 'dragover') {
      setDragActive(true);
    } else if (e.type === 'dragleave') {
      setDragActive(false);
    }
  };

  const handleDrop = (e) => {
    e.preventDefault();
    e.stopPropagation();
    setDragActive(false);

    if (e.dataTransfer.files && e.dataTransfer.files[0]) {
      handleFile(e.dataTransfer.files[0]);
    }
  };

  const handleFileInput = (e) => {
    if (e.target.files && e.target.files[0]) {
      handleFile(e.target.files[0]);
    }
  };

  const handleFile = (file) => {
    const validTypes = [
      'application/vnd.ms-powerpoint',
      'application/vnd.openxmlformats-officedocument.presentationml.presentation',
    ];

    if (validTypes.includes(file.type)) {
      setUploadedFile(file);
    } else {
      alert('Please upload a valid PowerPoint file (.ppt or .pptx)');
    }
  };

  const startConversion = async () => {
    setIsConverting(true);
    setConversionProgress(0);

    try {
      // Create FormData to send file to backend
      const formData = new FormData();
      formData.append('file', uploadedFile);
      formData.append('fileName', uploadedFile.name);

      // Start progress animation
      const progressInterval = setInterval(() => {
        setConversionProgress((prev) => {
          if (prev >= 90) {
            clearInterval(progressInterval);
            return 90; // Stop at 90% until we get response
          }
          return prev + 10;
        });
      }, 300);

      // TODO: Replace with your actual backend API endpoint
      const API_ENDPOINT = 'http://localhost:5000/api/convert-ppt'; // Change this to your backend URL
      
      const response = await fetch(API_ENDPOINT, {
        method: 'POST',
        body: formData,
      });

      clearInterval(progressInterval);

      if (!response.ok) {
        throw new Error('Failed to convert PPT');
      }

      const data = await response.json();
      
      // Complete progress
      setConversionProgress(100);
      
      // Set the generated content from backend
      setGeneratedContent({
        title: data.title || uploadedFile.name.replace(/\.[^/.]+$/, ''),
        summary: data.summary || 'No summary generated',
        story: data.story || [],
        notes: data.notes || [],
        stats: data.stats || {
          slides: 0,
          chapters: 0,
          quests: 0,
          estimatedTime: '0 minutes'
        }
      });

      setIsConverting(false);
      setConversionComplete(true);

    } catch (error) {
      console.error('Conversion error:', error);
      
      // Clear progress interval if still running
      setConversionProgress(0);
      setIsConverting(false);
      
      // Show error to user
      alert(`Failed to convert PPT: ${error.message}\n\nPlease make sure your backend server is running.`);
      
      // For development: Use mock data if backend is not available
      // Remove this in production
      setGeneratedContent({
        title: uploadedFile.name.replace(/\.[^/.]+$/, ''),
        summary: `[DEMO MODE] This interactive story would be created from "${uploadedFile.name}". Connect to backend API to get real AI-generated content.`,
        story: [
          {
            chapter: 'Introduction',
            content: '[Demo] Welcome to your interactive learning journey! Connect backend to get real content.',
            quest: 'Complete the introduction quiz',
            points: 100
          },
          {
            chapter: 'Core Concepts',
            content: '[Demo] Real content will be generated by your backend AI service.',
            quest: 'Solve concept-based puzzles',
            points: 250
          },
          {
            chapter: 'Advanced Topics',
            content: '[Demo] Advanced material will be extracted from your actual slides.',
            quest: 'Complete the final challenge',
            points: 500
          }
        ],
        notes: [
          '⚠️ Backend API not connected - showing demo data',
          '📝 Configure API_ENDPOINT in PPTConverter.jsx',
          '🔌 Start your backend server',
          '🤖 Integrate with Gemini AI or your preferred service',
          '✨ Real content will replace this demo'
        ],
        stats: {
          slides: 0,
          chapters: 3,
          quests: 8,
          estimatedTime: 'N/A'
        }
      });
      setIsConverting(false);
      setConversionComplete(true);
    }
  };

  const resetUpload = () => {
    setUploadedFile(null);
    setIsConverting(false);
    setConversionProgress(0);
    setConversionComplete(false);
    setShowResults(false);
    setGeneratedContent(null);
  };

  const features = [
    { icon: '🤖', title: 'AI-Powered Analysis', desc: 'Gemini AI extracts key concepts' },
    { icon: '🎮', title: 'Gamified Conversion', desc: 'Transforms slides into interactive quests' },
    { icon: '🎨', title: 'Visual Enhancement', desc: 'Adds animations and visual effects' },
    { icon: '📊', title: 'Progress Tracking', desc: 'Track learning journey through stories' },
  ];

  return (
    <div className="min-h-screen bg-gradient-to-b from-[#070912] via-[#101325] to-[#1a1f3a] text-white">
      {/* Animated Background */}
      <div className="absolute inset-0 bg-[linear-gradient(120deg,rgba(255,255,255,0.03)_1px,transparent_0)] bg-[size:28px_28px] opacity-40" />
      <div className="absolute inset-0">
        <div className="absolute -top-32 -left-24 w-[420px] h-[420px] bg-primary/20 blur-3xl rounded-full" />
        <div className="absolute top-1/3 -right-24 w-[360px] h-[360px] bg-secondary/15 blur-3xl rounded-full" />
      </div>

      <div className="relative z-10 max-w-6xl mx-auto px-6 py-12">
        {/* Header */}
        <motion.div
          initial={{ opacity: 0, y: -20 }}
          animate={{ opacity: 1, y: 0 }}
          className="text-center mb-12"
        >
          <button
            onClick={() => navigate('/dashboard')}
            className="inline-flex items-center gap-2 mb-6 text-slate-400 hover:text-white transition-colors"
          >
            <span>←</span> Back to Dashboard
          </button>
          <h1 className="text-5xl font-black mb-4 bg-gradient-to-r from-white via-secondary to-primary bg-clip-text text-transparent">
            PPT to Interactive Story
          </h1>
          <p className="text-lg text-slate-300 max-w-2xl mx-auto">
            Upload your PowerPoint presentations and watch them transform into immersive, gamified learning experiences
          </p>
        </motion.div>

        {/* Features Grid */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.2 }}
          className="grid grid-cols-2 md:grid-cols-4 gap-4 mb-12"
        >
          {features.map((feature, index) => (
            <motion.div
              key={feature.title}
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ delay: 0.3 + index * 0.1 }}
              className="bg-white/5 backdrop-blur-xl rounded-2xl p-4 border border-white/10 text-center"
            >
              <div className="text-4xl mb-2">{feature.icon}</div>
              <h3 className="font-semibold text-sm mb-1">{feature.title}</h3>
              <p className="text-xs text-slate-400">{feature.desc}</p>
            </motion.div>
          ))}
        </motion.div>

        {/* Main Upload Area */}
        <motion.div
          initial={{ opacity: 0, y: 30 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.4 }}
          className="bg-white/10 backdrop-blur-xl rounded-3xl border border-white/20 p-8 shadow-2xl"
        >
          {!uploadedFile ? (
            /* Upload Zone */
            <div
              onDragEnter={handleDrag}
              onDragLeave={handleDrag}
              onDragOver={handleDrag}
              onDrop={handleDrop}
              className={`border-4 border-dashed rounded-2xl p-12 text-center transition-all ${
                dragActive
                  ? 'border-primary bg-primary/10 scale-105'
                  : 'border-white/20 hover:border-white/40'
              }`}
            >
              <motion.div
                animate={{ y: [0, -10, 0] }}
                transition={{ duration: 2, repeat: Infinity }}
                className="inline-flex items-center justify-center w-24 h-24 rounded-full bg-gradient-to-br from-primary to-secondary text-5xl mb-6 shadow-lg"
              >
                📎
              </motion.div>
              <h2 className="text-2xl font-bold mb-3">Upload Your PowerPoint</h2>
              <p className="text-slate-400 mb-6">
                Drag and drop your .ppt or .pptx file here, or click to browse
              </p>
              <input
                type="file"
                id="file-upload"
                accept=".ppt,.pptx"
                onChange={handleFileInput}
                className="hidden"
              />
              <label
                htmlFor="file-upload"
                className="inline-block px-8 py-4 bg-gradient-to-r from-primary to-secondary text-white font-semibold rounded-full cursor-pointer hover:shadow-2xl transition-shadow"
              >
                Browse Files
              </label>
              <p className="text-xs text-slate-500 mt-4">Maximum file size: 50MB</p>
            </div>
          ) : !conversionComplete ? (
            /* File Preview & Conversion */
            <div className="space-y-6">
              <div className="flex items-center justify-between p-6 bg-white/5 rounded-2xl border border-white/10">
                <div className="flex items-center gap-4">
                  <div className="w-16 h-16 rounded-xl bg-gradient-to-br from-orange-500 to-red-500 flex items-center justify-center text-3xl">
                    📄
                  </div>
                  <div>
                    <h3 className="font-semibold text-lg">{uploadedFile.name}</h3>
                    <p className="text-sm text-slate-400">
                      {(uploadedFile.size / 1024 / 1024).toFixed(2)} MB
                    </p>
                  </div>
                </div>
                {!isConverting && (
                  <button
                    onClick={resetUpload}
                    className="w-10 h-10 rounded-lg bg-red-500/20 text-red-400 hover:bg-red-500/30 flex items-center justify-center transition-colors"
                  >
                    ✕
                  </button>
                )}
              </div>

              {isConverting ? (
                /* Conversion Progress */
                <div className="space-y-4">
                  <div className="text-center">
                    <motion.div
                      animate={{ rotate: 360 }}
                      transition={{ duration: 2, repeat: Infinity, ease: 'linear' }}
                      className="inline-flex items-center justify-center w-20 h-20 rounded-full bg-gradient-to-br from-primary to-secondary text-4xl mb-4"
                    >
                      ⚙️
                    </motion.div>
                    <h3 className="text-2xl font-bold mb-2">Converting Your Presentation</h3>
                    <p className="text-slate-400">AI is analyzing and transforming your slides...</p>
                  </div>

                  {/* Progress Bar */}
                  <div className="space-y-2">
                    <div className="flex items-center justify-between text-sm">
                      <span className="text-slate-400">Progress</span>
                      <span className="font-semibold text-primary">{conversionProgress}%</span>
                    </div>
                    <div className="h-3 bg-white/10 rounded-full overflow-hidden">
                      <motion.div
                        className="h-full bg-gradient-to-r from-primary to-secondary"
                        initial={{ width: 0 }}
                        animate={{ width: `${conversionProgress}%` }}
                        transition={{ duration: 0.3 }}
                      />
                    </div>
                  </div>

                  {/* Conversion Steps */}
                  <div className="space-y-3">
                    {[
                      { label: 'Extracting content', progress: 25 },
                      { label: 'Analyzing key concepts', progress: 50 },
                      { label: 'Creating interactive elements', progress: 75 },
                      { label: 'Finalizing story', progress: 100 },
                    ].map((step) => (
                      <div
                        key={step.label}
                        className={`flex items-center gap-3 p-3 rounded-lg ${
                          conversionProgress >= step.progress
                            ? 'bg-primary/20 border border-primary/40'
                            : 'bg-white/5 border border-white/10'
                        }`}
                      >
                        <div
                          className={`w-8 h-8 rounded-full flex items-center justify-center ${
                            conversionProgress >= step.progress
                              ? 'bg-primary text-white'
                              : 'bg-white/10 text-slate-400'
                          }`}
                        >
                          {conversionProgress >= step.progress ? '✓' : '○'}
                        </div>
                        <span className="font-medium">{step.label}</span>
                      </div>
                    ))}
                  </div>
                </div>
              ) : (
                /* Convert Button */
                <motion.button
                  whileHover={{ scale: 1.02 }}
                  whileTap={{ scale: 0.98 }}
                  onClick={startConversion}
                  className="w-full py-6 bg-gradient-to-r from-primary to-secondary text-white text-xl font-bold rounded-2xl shadow-lg hover:shadow-2xl transition-shadow"
                >
                  🪄 Start Magic Conversion
                </motion.button>
              )}
            </div>
          ) : !showResults ? (
            /* Conversion Complete - Initial View */
            <motion.div
              initial={{ opacity: 0, scale: 0.9 }}
              animate={{ opacity: 1, scale: 1 }}
              className="text-center space-y-6"
            >
              <motion.div
                animate={{ scale: [1, 1.2, 1] }}
                transition={{ duration: 1, repeat: Infinity }}
                className="inline-flex items-center justify-center w-24 h-24 rounded-full bg-gradient-to-br from-green-500 to-emerald-500 text-5xl shadow-2xl"
              >
                ✨
              </motion.div>
              <div>
                <h2 className="text-3xl font-bold mb-3">Conversion Complete!</h2>
                <p className="text-slate-300 mb-2">Your interactive story is ready</p>
                <p className="text-sm text-slate-500">"{uploadedFile.name}" has been transformed</p>
              </div>

              <div className="flex flex-col sm:flex-row gap-4 justify-center">
                <motion.button
                  whileHover={{ scale: 1.05 }}
                  whileTap={{ scale: 0.95 }}
                  onClick={() => setShowResults(true)}
                  className="px-8 py-4 bg-gradient-to-r from-primary to-secondary text-white font-semibold rounded-full shadow-lg"
                >
                  View Story & Notes
                </motion.button>
                <motion.button
                  whileHover={{ scale: 1.05 }}
                  whileTap={{ scale: 0.95 }}
                  onClick={resetUpload}
                  className="px-8 py-4 bg-white/10 border border-white/20 text-white font-semibold rounded-full"
                >
                  Convert Another
                </motion.button>
              </div>
            </motion.div>
          ) : (
            /* Results View - Story, Summary, Notes */
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              className="space-y-6"
            >
              {/* Header */}
              <div className="flex items-center justify-between pb-6 border-b border-white/10">
                <div>
                  <h2 className="text-3xl font-bold mb-2">{generatedContent.title}</h2>
                  <div className="flex gap-4 text-sm text-slate-400">
                    <span>📄 {generatedContent.stats.slides} slides</span>
                    <span>📚 {generatedContent.stats.chapters} chapters</span>
                    <span>🎯 {generatedContent.stats.quests} quests</span>
                    <span>⏱️ {generatedContent.stats.estimatedTime}</span>
                  </div>
                </div>
                <button
                  onClick={() => setShowResults(false)}
                  className="px-4 py-2 bg-white/10 hover:bg-white/20 rounded-lg transition-colors"
                >
                  ← Back
                </button>
              </div>

              {/* Summary */}
              <div className="bg-gradient-to-r from-blue-500/10 to-purple-500/10 rounded-2xl p-6 border border-blue-500/30">
                <h3 className="text-xl font-bold mb-3 flex items-center gap-2">
                  <span>📝</span> Summary
                </h3>
                <p className="text-slate-300 leading-relaxed">{generatedContent.summary}</p>
              </div>

              {/* Story Chapters */}
              <div className="space-y-4">
                <h3 className="text-xl font-bold flex items-center gap-2">
                  <span>📖</span> Interactive Story
                </h3>
                {generatedContent.story.map((chapter, index) => (
                  <motion.div
                    key={index}
                    initial={{ opacity: 0, x: -20 }}
                    animate={{ opacity: 1, x: 0 }}
                    transition={{ delay: index * 0.1 }}
                    className="bg-white/5 rounded-xl p-6 border border-white/10 hover:border-primary/50 transition-colors"
                  >
                    <div className="flex items-start justify-between mb-3">
                      <div>
                        <div className="text-xs text-primary font-semibold mb-1">Chapter {index + 1}</div>
                        <h4 className="text-lg font-bold">{chapter.chapter}</h4>
                      </div>
                      <div className="px-3 py-1 bg-yellow-500/20 text-yellow-400 rounded-full text-sm font-semibold">
                        {chapter.points} pts
                      </div>
                    </div>
                    <p className="text-slate-300 mb-3">{chapter.content}</p>
                    <div className="flex items-center gap-2 text-sm">
                      <span className="text-secondary">🎯 Quest:</span>
                      <span className="text-slate-400">{chapter.quest}</span>
                    </div>
                  </motion.div>
                ))}
              </div>

              {/* Key Notes */}
              <div className="bg-gradient-to-r from-green-500/10 to-emerald-500/10 rounded-2xl p-6 border border-green-500/30">
                <h3 className="text-xl font-bold mb-4 flex items-center gap-2">
                  <span>💡</span> Key Notes
                </h3>
                <ul className="space-y-3">
                  {generatedContent.notes.map((note, index) => (
                    <motion.li
                      key={index}
                      initial={{ opacity: 0, x: -10 }}
                      animate={{ opacity: 1, x: 0 }}
                      transition={{ delay: index * 0.05 }}
                      className="flex items-start gap-3 text-slate-300"
                    >
                      <span className="text-green-400 mt-1">•</span>
                      <span>{note}</span>
                    </motion.li>
                  ))}
                </ul>
              </div>

              {/* Action Buttons */}
              <div className="flex flex-col sm:flex-row gap-4 pt-4">
                <motion.button
                  whileHover={{ scale: 1.02 }}
                  whileTap={{ scale: 0.98 }}
                  onClick={() => navigate('/dashboard')}
                  className="flex-1 py-4 bg-gradient-to-r from-primary to-secondary text-white font-semibold rounded-xl shadow-lg"
                >
                  Go to Dashboard
                </motion.button>
                <motion.button
                  whileHover={{ scale: 1.02 }}
                  whileTap={{ scale: 0.98 }}
                  onClick={resetUpload}
                  className="flex-1 py-4 bg-white/10 border border-white/20 text-white font-semibold rounded-xl hover:bg-white/20 transition-colors"
                >
                  Convert Another PPT
                </motion.button>
              </div>
            </motion.div>
          )}
        </motion.div>

        {/* How It Works */}
        <motion.div
          initial={{ opacity: 0, y: 30 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.6 }}
          className="mt-12 bg-white/5 backdrop-blur-xl rounded-2xl border border-white/10 p-8"
        >
          <h2 className="text-2xl font-bold mb-6 text-center">How It Works</h2>
          <div className="grid md:grid-cols-4 gap-6">
            {[
              { step: '1', icon: '📤', title: 'Upload PPT', desc: 'Choose your presentation file' },
              { step: '2', icon: '🤖', title: 'AI Analysis', desc: 'Gemini extracts key concepts' },
              { step: '3', icon: '🎮', title: 'Gamification', desc: 'Converts into interactive story' },
              { step: '4', icon: '🚀', title: 'Learn & Play', desc: 'Experience your content' },
            ].map((item) => (
              <div key={item.step} className="text-center">
                <div className="w-12 h-12 rounded-full bg-gradient-to-br from-primary to-secondary text-white font-bold flex items-center justify-center mx-auto mb-3">
                  {item.step}
                </div>
                <div className="text-4xl mb-2">{item.icon}</div>
                <h3 className="font-semibold mb-1">{item.title}</h3>
                <p className="text-sm text-slate-400">{item.desc}</p>
              </div>
            ))}
          </div>
        </motion.div>
      </div>
    </div>
  );
};

export default PPTConverter;
